{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\recipe-sharing-main\\\\client\\\\src\\\\components\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext'; // Assuming you have an AuthContext for managing authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element\n}) => {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth(); // Replace useAuth with your authentication context hook\n\n  return isLoggedIn ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 33\n  }, this);\n};\n_s(PrivateRoute, \"Jbx0LrCfdz/EDenJV2YbpvzQ6CY=\", false, function () {\n  return [useAuth];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\n\n// import React from 'react';\n// import { Route, Navigate } from 'react-router-dom';\n// import { useAuth } from './AuthContext';\n\n// const PrivateRoute = ({ element: Element, ...rest }) => {\n//   const { isLoggedIn } = useAuth();\n\n//   return (\n//     isLoggedIn ? (\n//       <Route {...rest} element={<Element />} />\n//     ) : (\n//       <Navigate to=\"/login\" replace />\n//     )\n//   );\n// };\n\n// export default PrivateRoute;\n\n// import React from 'react';\n// import { Route, Navigate } from 'react-router-dom';\n// import { useAuth } from './AuthContext';\n\n// const PrivateRoute = ({ element, ...rest }) => {\n//   const { isLoggedIn } = useAuth();\n\n//   return isLoggedIn ? (\n//     <Route {...rest} element={element} />\n//   ) : (\n//     <Navigate to=\"/login\" replace />\n//   );\n// };\n\n// export default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","PrivateRoute","element","_s","isLoggedIn","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/recipe-sharing-main/client/src/components/PrivateRoute.js"],"sourcesContent":["\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from './AuthContext'; // Assuming you have an AuthContext for managing authentication\r\n\r\nconst PrivateRoute = ({ element }) => {\r\n  const { isLoggedIn } = useAuth(); // Replace useAuth with your authentication context hook\r\n\r\n  return isLoggedIn ? element : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { Route, Navigate } from 'react-router-dom';\r\n// import { useAuth } from './AuthContext';\r\n\r\n// const PrivateRoute = ({ element: Element, ...rest }) => {\r\n//   const { isLoggedIn } = useAuth();\r\n\r\n//   return (\r\n//     isLoggedIn ? (\r\n//       <Route {...rest} element={<Element />} />\r\n//     ) : (\r\n//       <Navigate to=\"/login\" replace />\r\n//     )\r\n//   );\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// import React from 'react';\r\n// import { Route, Navigate } from 'react-router-dom';\r\n// import { useAuth } from './AuthContext';\r\n\r\n// const PrivateRoute = ({ element, ...rest }) => {\r\n//   const { isLoggedIn } = useAuth();\r\n\r\n//   return isLoggedIn ? (\r\n//     <Route {...rest} element={element} />\r\n//   ) : (\r\n//     <Navigate to=\"/login\" replace />\r\n//   );\r\n// };\r\n\r\n// export default PrivateRoute;\r\n"],"mappings":";;AAIA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM;IAAEC;EAAW,CAAC,GAAGN,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC,OAAOM,UAAU,GAAGF,OAAO,gBAAGF,OAAA,CAACH,QAAQ;IAACQ,EAAE,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxD,CAAC;AAACN,EAAA,CAJIF,YAAY;EAAA,QACOH,OAAO;AAAA;AAAAY,EAAA,GAD1BT,YAAY;AAMlB,eAAeA,YAAY;;AAI3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}