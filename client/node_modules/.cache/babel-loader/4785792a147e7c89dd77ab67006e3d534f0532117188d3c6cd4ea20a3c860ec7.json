{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\recipe-sharing-main\\\\client\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const login = token => {\n    localStorage.setItem('token', token);\n    setIsLoggedIn(true);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   const login = (token) => {\n//     localStorage.setItem('token', token);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// import React, { createContext, useContext, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false); // Example state, replace with your authentication logic\n//   // You may want to check localStorage or cookies for token validity here on initial load\n\n//   const login = (token) => {\n//     localStorage.setItem('token', token); // Example: Storing token in localStorage\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token'); // Example: Clearing token from localStorage\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// import React, { createContext, useState, useContext } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   const login = (token) => {\n//     setToken(token);\n//     localStorage.setItem('token', token);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     setToken('');\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout, token }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n_s2(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","login","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/recipe-sharing-main/client/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const login = (token) => {\r\n    localStorage.setItem('token', token);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       setIsLoggedIn(true);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (token) => {\r\n//     localStorage.setItem('token', token);\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n// import React, { createContext, useContext, useState } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false); // Example state, replace with your authentication logic\r\n//   // You may want to check localStorage or cookies for token validity here on initial load\r\n\r\n//   const login = (token) => {\r\n//     localStorage.setItem('token', token); // Example: Storing token in localStorage\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token'); // Example: Clearing token from localStorage\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n\r\n// import React, { createContext, useState, useContext } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n\r\n//   const login = (token) => {\r\n//     setToken(token);\r\n//     localStorage.setItem('token', token);\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setToken('');\r\n//     localStorage.removeItem('token');\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout, token }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAIH,KAAK,IAAK;IACvBC,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACpCD,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnBJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChCP,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEV,UAAU;MAAEK,KAAK;MAAEE;IAAO,CAAE;IAAAT,QAAA,EACxDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAGD;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAAf,GAAA,CAnHaF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}