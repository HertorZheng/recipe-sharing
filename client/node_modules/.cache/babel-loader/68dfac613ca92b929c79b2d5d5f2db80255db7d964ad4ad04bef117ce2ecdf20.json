{"ast":null,"code":"// import { Navigate, Outlet } from 'react-router-dom'\n// const PrivateRoutes = () => {\n//   let auth = {'token':true}\n// return (\n//     auth.token ? <Outlet/> : <Navigate to='/login'/>\n//   )\n// }\n// export default PrivateRoutes;\n\n// import React from 'react';\n// import { Navigate } from 'react-router-dom';\n// import { useAuth } from './AuthContext'; // Assuming you have an AuthContext for managing authentication\n\n// const PrivateRoute = ({ element }) => {\n//   const { isLoggedIn } = useAuth(); // Replace useAuth with your authentication context hook\n\n//   return isLoggedIn ? element : <Navigate to=\"/login\" />;\n// };\n\n// export default PrivateRoute;\n\n// import React from 'react';\n// import { Route, Navigate } from 'react-router-dom';\n// import { useAuth } from './AuthContext';\n\n// const PrivateRoute = ({ element: Element, ...rest }) => {\n//   const { isLoggedIn } = useAuth();\n\n//   return (\n//     isLoggedIn ? (\n//       <Route {...rest} element={<Element />} />\n//     ) : (\n//       <Navigate to=\"/login\" replace />\n//     )\n//   );\n// };\n\n// export default PrivateRoute;\n\n// import React from 'react';\n// import { Route, Navigate } from 'react-router-dom';\n// import { useAuth } from './AuthContext';\n\n// const PrivateRoute = ({ element, ...rest }) => {\n//   const { isLoggedIn } = useAuth();\n\n//   return isLoggedIn ? (\n//     <Route {...rest} element={element} />\n//   ) : (\n//     <Navigate to=\"/login\" replace />\n//   );\n// };\n\n// export default PrivateRoute;","map":{"version":3,"names":[],"sources":["C:/Users/moham/OneDrive/Desktop/recipe-sharing-main/client/src/components/PrivateRoute.js"],"sourcesContent":["// import { Navigate, Outlet } from 'react-router-dom'\r\n// const PrivateRoutes = () => {\r\n//   let auth = {'token':true}\r\n// return (\r\n//     auth.token ? <Outlet/> : <Navigate to='/login'/>\r\n//   )\r\n// }\r\n// export default PrivateRoutes;\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { Navigate } from 'react-router-dom';\r\n// import { useAuth } from './AuthContext'; // Assuming you have an AuthContext for managing authentication\r\n\r\n// const PrivateRoute = ({ element }) => {\r\n//   const { isLoggedIn } = useAuth(); // Replace useAuth with your authentication context hook\r\n\r\n//   return isLoggedIn ? element : <Navigate to=\"/login\" />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { Route, Navigate } from 'react-router-dom';\r\n// import { useAuth } from './AuthContext';\r\n\r\n// const PrivateRoute = ({ element: Element, ...rest }) => {\r\n//   const { isLoggedIn } = useAuth();\r\n\r\n//   return (\r\n//     isLoggedIn ? (\r\n//       <Route {...rest} element={<Element />} />\r\n//     ) : (\r\n//       <Navigate to=\"/login\" replace />\r\n//     )\r\n//   );\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// import React from 'react';\r\n// import { Route, Navigate } from 'react-router-dom';\r\n// import { useAuth } from './AuthContext';\r\n\r\n// const PrivateRoute = ({ element, ...rest }) => {\r\n//   const { isLoggedIn } = useAuth();\r\n\r\n//   return isLoggedIn ? (\r\n//     <Route {...rest} element={element} />\r\n//   ) : (\r\n//     <Navigate to=\"/login\" replace />\r\n//   );\r\n// };\r\n\r\n// export default PrivateRoute;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}