{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   const login = (token) => {\n//     localStorage.setItem('token', token);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// import React, { createContext, useContext, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false); // Example state, replace with your authentication logic\n//   // You may want to check localStorage or cookies for token validity here on initial load\n\n//   const login = (token) => {\n//     localStorage.setItem('token', token); // Example: Storing token in localStorage\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token'); // Example: Clearing token from localStorage\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// import React, { createContext, useState, useContext } from 'react';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   const login = (token) => {\n//     setToken(token);\n//     localStorage.setItem('token', token);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     setToken('');\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout, token }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/moham/OneDrive/Desktop/recipe-sharing-main/client/src/components/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       setIsLoggedIn(true);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (token) => {\r\n//     localStorage.setItem('token', token);\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n// import React, { createContext, useContext, useState } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false); // Example state, replace with your authentication logic\r\n//   // You may want to check localStorage or cookies for token validity here on initial load\r\n\r\n//   const login = (token) => {\r\n//     localStorage.setItem('token', token); // Example: Storing token in localStorage\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token'); // Example: Clearing token from localStorage\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n\r\n// import React, { createContext, useState, useContext } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n\r\n//   const login = (token) => {\r\n//     setToken(token);\r\n//     localStorage.setItem('token', token);\r\n//     setIsLoggedIn(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setToken('');\r\n//     localStorage.removeItem('token');\r\n//     setIsLoggedIn(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout, token }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"AAAA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}